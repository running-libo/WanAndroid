plugins {
    id 'com.android.library'
    id 'kotlin-android'
    id 'kotlin-kapt'   //添加了databinding，而且用到了kotlin，一定要添加注解处理插件
}


android {
    compileSdkVersion 30
    buildToolsVersion "30.0.3"

    defaultConfig {
        minSdkVersion 21
        targetSdkVersion 28
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        consumerProguardFiles "consumer-rules.pro"

        javaCompileOptions {  //ARouter中注解处理器需要，需要将参数起名，为当前模块名字
            annotationProcessorOptions {
                arguments = [moduleName: project.getName()]
                includeCompileClasspath true
            }
        }

        //往改模块的BuildConfig文件注入属性和值
        //需要三个参数  1.属性类型(String/int)   2.属性名  3.属性值
        //String类型，需要加入转义的双引号才表示字符串，不然生成的变量没有双引号
        buildConfigField 'String', 'IS_DEV', "\"dev\""
        buildConfigField 'String', 'IS_BETA', "\"beta\""
        buildConfigField 'String', 'IS_RELEASE', "\"release\""
        buildConfigField 'String', 'NET_TYPE', "\""+getServer()+"\""  //net_type读取properties中NET_TYPE值

//        configAppName()
    }

    //buildTypes: 构建类型
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    kotlinOptions {
        jvmTarget = '1.8'
    }

    dataBinding {
        enabled = true
    }
}

//使用文件流读取properties数据
def getServer() {
    def netType
    Properties properties = new Properties()  //使用Properties读取流文件
    def file = file("../gradle.properties")  // file() 创建一个Java中的File对象
    if (file.canRead()) {
        //可以读取到文件
        properties.load(file.newInputStream())
        if (properties != null) {
            //文件读取成功
            netType = properties.getProperty('NET_TYPE')  //getProperty读取属性值
        }
    }
    return netType
}

dependencies {

    implementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
    implementation 'androidx.core:core-ktx:1.2.0'
    implementation 'androidx.appcompat:appcompat:1.1.0'
    implementation 'com.google.android.material:material:1.1.0'

    testImplementation 'junit:junit:4.+'
    androidTestImplementation 'androidx.test.ext:junit:1.1.1'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.2.0'

    api project(path: ':library-res')

    //Leakcanary
    api 'com.squareup.leakcanary:leakcanary-android:2.5'

    //Immersionbar
    api 'com.gyf.immersionbar:immersionbar:3.0.0-beta05'
    api 'com.gyf.immersionbar:immersionbar-components:3.0.0-beta05'

    //ARouter
    api 'com.alibaba:arouter-api:1.2.1'
    annotationProcessor 'com.alibaba:arouter-compiler:1.1.2'

    //RxPermission
    api 'com.tbruyelle.rxpermissions:rxpermissions:0.9.4@aar'

    //Rxjava
    api 'io.reactivex:rxjava:1.1.0'

    //Glide
    api 'com.github.bumptech.glide:glide:4.8.0'

    //SmartRefreshLayout
    api 'com.scwang.smartrefresh:SmartRefreshLayout:1.1.0'
    api 'com.scwang.smartrefresh:SmartRefreshHeader:1.1.0'

    //X5 webview
    api 'com.tencent.tbs.tbssdk:sdk:43939'

    //Banner
    api 'io.github.zguop:pager2Banner:1.0.5'

    //tagview
    api 'io.github.running-libo:flowlayout:1.0.0'

    //project-utils
    api 'io.github.running-libo:project-lib:1.0.0'

    //网络请求库
    api 'io.github.running-libo:library-network:1.0.0'

    //basemvvm框架
    api 'io.github.running-libo:basemvvm:1.0.0'

    //协程
    api "org.jetbrains.kotlinx:kotlinx-coroutines-core:1.3.1"
    api "org.jetbrains.kotlinx:kotlinx-coroutines-android:1.3.1"
    api "androidx.lifecycle:lifecycle-extensions:2.1.0"
    api "androidx.lifecycle:lifecycle-viewmodel-ktx:2.1.0"

}
